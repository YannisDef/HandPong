#!/usr/bin/env python3
##
## CREATIVE LAB PROJECT, 2022
## Yannis Defontaine
## File description:
## Pong game, play with your hands
##

import sys
import pygame
from math import ceil
from random import randint
import cv2
import numpy

NB_ARG=1
ERROR=-1
SUCCESS=0

#--------------------------GRAPHICS--------------------------------------------#

Y = 1
X = 0

WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
BLUE = (0, 0, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)

FRAMES_PER_SECOND = 30
WINDOW_HEIGHT = 480
WINDOW_WIDTH = 640

class Player:
    def __init__(self, x: int = 10, y: int = 10, size_x: int = 25, size_y: int = 100, speed: int = 10, col: int = BLUE) -> None:
        self.x = x
        self.y = y

        self.size_x = size_x
        self.size_y = size_y

        self.color = col
        self.speed = speed

    def draw(self, screen):
        pygame.draw.rect(screen, self.color, ((self.x, self.y), (self.size_x, self.size_y)))

    def move(self, bonus: int):
        key = pygame.key.get_pressed()
        if key[pygame.K_UP]:
           self.y -= self.speed + bonus
        if key[pygame.K_DOWN]:
           self.y += self.speed + bonus

    def update(self, screen, bonus: int = 0):
        self.draw(screen)
        self.move(bonus)

class Ball:
    def __init__(self, x: int = WINDOW_WIDTH / 2, y: int = WINDOW_HEIGHT / 2, circle_radius: int = 10, speed: int = 12) -> None:
        self.x = x
        self.y = y

        self.radius = circle_radius

        self.color = RED
        self.speed = speed
        
        self.canCollid = True

        axe = [-1, 1]
        self.vector = [-1, axe[randint(0, 1)]]

    def draw(self, screen):
        pygame.draw.circle(screen, self.color, (self.x, self.y), self.radius, 100)

    def move(self, bonus: int):
        if self.vector[X] == 1:
            self.x += self.speed + bonus
        if self.vector[X] == -1:
            self.x -= self.speed + bonus
        if self.vector[Y] == 1:
            self.y += (self.speed/2) + bonus
        if self.vector[Y] == -1:
            self.y -= (self.speed/2) + bonus

    def update(self, screen, bonus: int = 0):
        if self.y <= 0 or self.y >= 480:
            self.vector[Y] *= -1
        self.draw(screen)
        self.move(bonus)

def checkOverlap(R, Xc, Yc, X1, Y1, X2, Y2):
    Xn = max(X1, min(Xc, X2))
    Yn = max(Y1, min(Yc, Y2))
    Dx = Xn - Xc
    Dy = Yn - Yc
    return (Dx**2 + Dy**2) <= R**2

#--------------------------HAND-DETECTION--------------------------------------#

CAMERA = 0
hand_cascad=cv2.CascadeClassifier("data/xml/fist.xml")
camera = cv2.VideoCapture(CAMERA)

marge = 70 # une marge de difference entre la main qui tourne a droite et la main qui tourne a gauche

#------------------------------------------------------------------------------#

def getSquares(tab_data: list, data_cascade, color) -> list:
    """ get squares of face
        
        scaleFactor diminue le nombre de carré plus il est grand
        minNeighbors va regarder x cases a coté voir si l'obj est toujours la, si oui alors il le déclare (3 < x < 5)

    Args:
        tab_data (list): list de data
        
    Returns:
        list: list avec les nouveaux squares
    """
    face = data_cascade.detectMultiScale(color, scaleFactor=1.2, minNeighbors=4)
    for x, y, w, h in face:
        tab_data.append([x, y, x+w, y+h])
    return tab_data

#------------------------------------------------------------------------------#

def blitCamFrame(frame,screen):
    screen.blit(frame,(0,0))
    return screen

def getCamFrame(color,camera):
    retval,frame=camera.read()
    frame=cv2.cvtColor(frame,cv2.COLOR_BGR2RGB)

    Nframe=numpy.rot90(frame)
    Nframe=pygame.surfarray.make_surface(Nframe)
    return frame, Nframe

def pong() -> None:
    screen_is_open = True
    pygame.init()

    screen = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
    clock = pygame.time.Clock()

    player_one = Player(y=WINDOW_HEIGHT-500)
    player_two = Player(x=WINDOW_WIDTH-40, y=WINDOW_HEIGHT-500, col=GREEN)
    ball = Ball(speed=3)

    #!--------------------------------------------------------------------------

    ret, frame = camera.read()
    cv2.flip(frame,1,frame)#mirror the image

    while screen_is_open:
        screen.fill(BLACK)

        frame, Nframe=getCamFrame(True,camera)
        screen=blitCamFrame(Nframe,screen)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                screen_is_open = False

        player_one.update(screen)
        player_two.update(screen)
        ball.update(screen)

        #!----------------------------------------------------------------------
        if not ret:
            print("ERROR with the cam")
            break
        if cv2.waitKey(1) == ord('q'):
            break

        tab_data = [] # reset le table data pour ne pas avoir plusieurs carrés

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        tab_data = getSquares(tab_data, hand_cascad, gray)

        # cette boucle check la difference entre deux carrés pour savoir si c'est la meme ou pas
        idx = 0
        for x, y, x2, y2 in tab_data:
            if not idx or (x-tab_data[idx-1][0]>marge or y-tab_data[idx-1][1]>marge): #? not idx ?
#                cv2.rectangle(frame, (x, y), (x2, y2), (0, 0, 255), 2)
                pygame.draw.rect(screen, BLUE, ((x, y), ((25, 100))))
                player_one.x = x
                player_one.y = y
                print("x:", x," y: ",y)
                idx+=1

        idx/=2
        idx = ceil(idx)

        #!----------------------------------------------------------------------
        if checkOverlap(ball.radius, ball.x, ball.y, player_one.x, player_one.y, player_one.x + player_one.size_x, player_one.y + player_one.size_y) and ball.canCollid:
            ball.vector[X] *= -1
            ball.speed += 0.5
        if checkOverlap(ball.radius, ball.x, ball.y, player_two.x, player_two.y, player_two.x + player_two.size_x, player_two.y + player_two.size_y) and ball.canCollid:
            ball.vector[X] *= -1
            ball.speed += 0.5

        pygame.display.flip()
        pygame.display.update()

#    pygame.quit()
    cv2.destroyAllWindows()
    camera.release()

#------------------------------------------------------------------------------#

def description():
    print("USAGE")
    print("\t./pong")
    print("DESCRIPTION")
    print("\tPong game, play with your hands")

if __name__ == '__main__':
    if len(sys.argv) != NB_ARG:
        exit(ERROR)
    pong()
