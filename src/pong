#!/usr/bin/env python3
##
## CREATIVE LAB PROJECT, 2022
## Yannis Defontaine
## File description:
## Pong game, play with your hands
##

import sys
import pygame
from random import randint
import cv2
import mediapipe as mp
import numpy

pop_sound = "data/pop_sound.mp3"
game_music = "data/game_music.mp3"
NB_ARG = 1
ERROR = -1
SUCCESS = 0

#--------------------------GRAPHICS--------------------------------------------#

Y = 1
X = 0

WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
BLUE = (0, 0, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)

FRAMES_PER_SECOND = 120
CAMERA_HEIGHT = 480
CAMERA_WIDTH = 640
WINDOW_HEIGHT = 1000
WINDOW_WIDTH = 1920


class Player:
    def __init__(self, x: int = 10, y: int = 10, size_x: int = 25, size_y: int = 100, speed: int = 10, col: int = BLUE, link_img: str = 'data/blue_racket.png') -> None:
        self.x = x
        self.y = y

        self.size_x = size_x
        self.size_y = size_y

        self.color = col
        self.speed = speed

        self.skin = pygame.image.load(link_img)

        self.score = 0

    def draw(self, screen):
#        pygame.draw.rect(screen, self.color, ((self.x, self.y), (self.size_x, self.size_y)))
        screen.blit(self.skin, (self.x, self.y))

    def move(self, bonus: int):
        key = pygame.key.get_pressed()
        if key[pygame.K_UP]:
           self.y -= self.speed + bonus
        if key[pygame.K_DOWN]:
           self.y += self.speed + bonus

    def update(self, screen, bonus: int = 0):
        self.y *= WINDOW_WIDTH/CAMERA_WIDTH
        self.draw(screen)
        self.move(bonus)


class Ball:
    def __init__(self, x: int = WINDOW_WIDTH / 2, y: int = WINDOW_HEIGHT / 2, circle_radius: int = 10, speed: int = 12) -> None:
        self.spwan_x = x
        self.spwan_y = y

        self.x = x
        self.y = y

        self.radius = circle_radius

        self.color = RED

        self.speed_max = speed
        self.speed = speed

        self.can_collid = True

        self.axe = [-1, 1]
        self.vector = [self.axe[randint(0, 1)], self.axe[randint(0, 1)]]

    def draw(self, screen):
        pygame.draw.circle(screen, self.color, (self.x, self.y), self.radius, 100)

    def move(self, bonus: int):
        if self.vector[X] == 1:
            self.x += self.speed + bonus
        if self.vector[X] == -1:
            self.x -= self.speed + bonus
        if self.vector[Y] == 1:
            self.y += (self.speed/2) + bonus
        if self.vector[Y] == -1:
            self.y -= (self.speed/2) + bonus

    def update(self, screen, bonus: int = 0):
        if self.y <= 0 or self.y >= WINDOW_HEIGHT - self.radius:
            self.vector[Y] *= -1
        if self.x < 0 or self.x > WINDOW_WIDTH:
            self.vector = [self.axe[randint(0, 1)], self.axe[randint(0, 1)]]
            tmp_x = self.x
            self.x, self.y = self.spwan_x, self.spwan_y
            self.speed = self.speed_max
            return 2 if tmp_x < 20 else 1
        self.draw(screen)
        self.move(bonus)
        return 0

def hit(screen, sound, ball):
    sound.play()
    ball.vector[X] *= -1
    ball.speed += 1

def check_overlap(R, Xc, Yc, X1, Y1, X2, Y2):
    Xn = max(X1, min(Xc, X2))
    Yn = max(Y1, min(Yc, Y2))
    Dx = Xn - Xc
    Dy = Yn - Yc
    return (Dx**2 + Dy**2) <= R**2


#--------------------------HAND-DETECTION--------------------------------------#

camera = cv2.VideoCapture(0) # 0 == webcam

def blit_cam_frame(frame, screen):
    screen.blit(frame,(WINDOW_WIDTH/2-CAMERA_WIDTH/2,0))
    return screen


def get_cam_frame(camera):
    retval, frame=camera.read()
    frame = cv2.cvtColor(frame,cv2.COLOR_BGR2RGB)

    Nframe = numpy.rot90(frame)
    Nframe = pygame.surfarray.make_surface(Nframe)
    return frame, Nframe


class hand_detector:
    def __init__(self, max_hands=2, detection_con=0.5, minTrack_con=0.5):
        """
            max_hands(int): Maximum number of hands to detect
            detection_con(float): Minimum Detection Confidence Threshold
            minTrack_con(float): Minimum Tracking Confidence Threshold
        """
        self.mp_hands = mp.solutions.hands
        self.hands = self.mp_hands.Hands(
            static_image_mode=False,
            max_num_hands=max_hands,
            min_detection_confidence=detection_con,
            min_tracking_confidence=minTrack_con
        )

    def find_hands(self, img, player_one, player_two):
        img_RGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        self.results = self.hands.process(img_RGB)
        h, w, c = img.shape

        if self.results.multi_hand_landmarks:
            for hand, handLms in zip(self.results.multi_handedness, self.results.multi_hand_landmarks):
                limit_list = []
                xList = []
                yList = []
                for id, lm in enumerate(handLms.landmark):
                    px, py, pz = int(lm.x * w), int(lm.y * h), int(lm.z * w)
                    limit_list.append([px, py, pz])
                    xList.append(px)
                    yList.append(py)

                xmin, xmax = min(xList), max(xList)
                ymin, ymax = min(yList), max(yList)
                boxW, boxH = xmax - xmin, ymax - ymin
                bbox = xmin, ymin, boxW, boxH

                if hand.classification[0].label == 'Left':
                    player_one.y = bbox[1]
                if hand.classification[0].label == 'Right':
                    player_two.y = bbox[1]


def pong() -> None:
    screen_is_open = True
    pygame.init()

    screen = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))

    player_one = Player(y=WINDOW_HEIGHT-500, link_img='data/blue_racket.png')
    player_two = Player(x=WINDOW_WIDTH-40, y=WINDOW_HEIGHT-500, col=GREEN, link_img='data/red_racket.png')
    ball = Ball(speed=15)

    detector = hand_detector(detection_con=0.8, max_hands=2)

    ret, frame = camera.read()
    if not ret:
        print(f'error: {ret}')
        return ERROR
    cv2.flip(frame, 1, frame) # mirror the image

    font = pygame.font.SysFont('data/font/arial.ttf', 52)
    general_score = font.render(str(player_one.score) + '-' + str(player_two.score), True, BLUE)

    #?----------------------------------------------------------------------
    pygame.mixer.init()

    hit_sound = pygame.mixer.Sound(pop_sound)
    hit_sound.set_volume(0.5)

    pygame.mixer.music.load(game_music)
    pygame.mixer.music.play()
    pygame.mixer.music.set_volume(0.1)
    #?----------------------------------------------------------------------

    while screen_is_open:
        screen.fill(BLACK)

        frame, Nframe = get_cam_frame(camera)
        screen = blit_cam_frame(Nframe, screen)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                screen_is_open = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    screen_is_open = False

        detector.find_hands(frame, player_one, player_two)
        player_one.update(screen)

        print("ball x", ball.x)

        player_two.update(screen)
        #? AMAZING IA
#        player_two.y = ball.y - (player_two.size_y / 2)
        #? ----------

        winner = ball.update(screen)

        if winner != 0:
            print(winner)
            if winner == 1:
                player_one.score += 1
            if winner == 2:
                player_two.score += 1
            general_score = font.render(str(player_one.score) + '-' + str(player_two.score), True, BLUE)

        if (check_overlap(ball.radius, ball.x, ball.y, player_one.x, player_one.y, player_one.x + player_one.size_x, player_one.y + player_one.size_y) or check_overlap(ball.radius, ball.x, ball.y, player_two.x, player_two.y, player_two.x + player_two.size_x, player_two.y + player_two.size_y)) and ball.can_collid:
            hit(screen, hit_sound, ball)

        screen.blit(general_score, (WINDOW_WIDTH/2, WINDOW_HEIGHT-100))

        pygame.display.flip()
        pygame.display.update()

    pygame.quit()
    cv2.destroyAllWindows()
    camera.release()


#------------------------------------------------------------------------------#


def description():
    print("USAGE")
    print("\t./pong")
    print("DESCRIPTION")
    print("\tPong game, play with your hands")


if __name__ == '__main__':
    if len(sys.argv) != NB_ARG:
        exit(ERROR)
    pong()
