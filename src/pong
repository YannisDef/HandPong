#!/usr/bin/env python3
##
## CREATIVE LAB PROJECT, 2022
## Yannis Defontaine
## File description:
## Pong game, play with your hands
##

import sys
import pygame
from random import randint
import cv2
import mediapipe as mp
import numpy

NB_ARG=1
ERROR=-1
SUCCESS=0

#--------------------------GRAPHICS--------------------------------------------#

Y = 1
X = 0

WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
BLUE = (0, 0, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)

FRAMES_PER_SECOND = 30
WINDOW_HEIGHT = 480
WINDOW_WIDTH = 640

class Player:
    def __init__(self, x: int = 10, y: int = 10, size_x: int = 25, size_y: int = 100, speed: int = 10, col: int = BLUE) -> None:
        self.x = x
        self.y = y

        self.size_x = size_x
        self.size_y = size_y

        self.color = col
        self.speed = speed

    def draw(self, screen):
        pygame.draw.rect(screen, self.color, ((self.x, self.y), (self.size_x, self.size_y)))

    def move(self, bonus: int):
        key = pygame.key.get_pressed()
        if key[pygame.K_UP]:
           self.y -= self.speed + bonus
        if key[pygame.K_DOWN]:
           self.y += self.speed + bonus

    def update(self, screen, bonus: int = 0):
        self.draw(screen)
        self.move(bonus)

class Ball:
    def __init__(self, x: int = WINDOW_WIDTH / 2, y: int = WINDOW_HEIGHT / 2, circle_radius: int = 10, speed: int = 12) -> None:
        self.x = x
        self.y = y

        self.radius = circle_radius

        self.color = RED
        self.speed = speed
        
        self.can_collid = True

        axe = [-1, 1]
        #TODO axe[randint(0, 1)] mettre ca aussi en x
        self.vector = [-1, axe[randint(0, 1)]]

    def draw(self, screen):
        pygame.draw.circle(screen, self.color, (self.x, self.y), self.radius, 100)

    def move(self, bonus: int):
        if self.vector[X] == 1:
            self.x += self.speed + bonus
        if self.vector[X] == -1:
            self.x -= self.speed + bonus
        if self.vector[Y] == 1:
            self.y += (self.speed/2) + bonus
        if self.vector[Y] == -1:
            self.y -= (self.speed/2) + bonus

    def update(self, screen, bonus: int = 0):
        if self.y <= 0 or self.y >= 480:
            self.vector[Y] *= -1
        self.draw(screen)
        self.move(bonus)

def check_overlap(R, Xc, Yc, X1, Y1, X2, Y2):
    Xn = max(X1, min(Xc, X2))
    Yn = max(Y1, min(Yc, Y2))
    Dx = Xn - Xc
    Dy = Yn - Yc
    return (Dx**2 + Dy**2) <= R**2

#--------------------------HAND-DETECTION--------------------------------------#

CAMERA = 0
camera = cv2.VideoCapture(CAMERA)

#------------------------------------------------------------------------------#

def blit_cam_frame(frame, screen):
    screen.blit(frame,(0,0))
    return screen

def get_cam_frame(camera):
    retval, frame=camera.read()
    frame = cv2.cvtColor(frame,cv2.COLOR_BGR2RGB)

    Nframe = numpy.rot90(frame)
    Nframe = pygame.surfarray.make_surface(Nframe)
    return frame, Nframe

class hand_detector:
    def __init__(self, max_hands=2, detection_con=0.5, minTrack_con=0.5):
        """
        :param max_hands: Maximum number of hands to detect
        :param detection_con: Minimum Detection Confidence Threshold
        :param minTrack_con: Minimum Tracking Confidence Threshold
        """
        self.mp_hands = mp.solutions.hands
        self.hands = self.mp_hands.Hands(
            static_image_mode=False,
            max_num_hands=max_hands,
            min_detection_confidence=detection_con,
            min_tracking_confidence=minTrack_con
        )

    def find_hands(self, img, player_one):
        img_RGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        self.results = self.hands.process(img_RGB)
        h, w, c = img.shape

        if self.results.multi_hand_landmarks:
            for _, handLms in zip(self.results.multi_handedness, self.results.multi_hand_landmarks):
                limit_list = []
                xList = []
                yList = []
                for id, lm in enumerate(handLms.landmark):
                    px, py, pz = int(lm.x * w), int(lm.y * h), int(lm.z * w)
                    limit_list.append([px, py, pz])
                    xList.append(px)
                    yList.append(py)

                xmin, xmax = min(xList), max(xList)
                ymin, ymax = min(yList), max(yList)
                boxW, boxH = xmax - xmin, ymax - ymin
                bbox = xmin, ymin, boxW, boxH

                player_one.y = bbox[1]

def pong() -> None:
    screen_is_open = True
    pygame.init()

    screen = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))

    player_one = Player(y=WINDOW_HEIGHT-500)
    player_two = Player(x=WINDOW_WIDTH-40, y=WINDOW_HEIGHT-500, col=GREEN)
    ball = Ball(speed=3)

    detector = hand_detector(detection_con=0.8, max_hands=2)

    ret, frame = camera.read()
    cv2.flip(frame,1,frame)#mirror the image

    while screen_is_open:
        screen.fill(BLACK)

        frame, Nframe = get_cam_frame(camera)
        screen = blit_cam_frame(Nframe, screen)

        #!----------------------------------------------------------------------
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                screen_is_open = False
        if not ret:
            print("ERROR with the cam")
            break
        if cv2.waitKey(1) == ord('q'):
            screen_is_open = False
        #!----------------------------------------------------------------------

        detector.find_hands(frame, player_one)
        player_one.update(screen)

        #? AMAZING IA
        player_two.update(screen)
        player_two.y = ball.y - (player_two.size_y / 2)
        #? ----------

        ball.update(screen)

        if check_overlap(ball.radius, ball.x, ball.y, player_one.x, player_one.y, player_one.x + player_one.size_x, player_one.y + player_one.size_y) and ball.can_collid:
            ball.vector[X] *= -1
            ball.speed += 1
        if check_overlap(ball.radius, ball.x, ball.y, player_two.x, player_two.y, player_two.x + player_two.size_x, player_two.y + player_two.size_y) and ball.can_collid:
            ball.vector[X] *= -1
            ball.speed += 1

        pygame.display.flip()
        pygame.display.update()

    pygame.quit()
    cv2.destroyAllWindows()
    camera.release()

#------------------------------------------------------------------------------#

def description():
    print("USAGE")
    print("\t./pong")
    print("DESCRIPTION")
    print("\tPong game, play with your hands")

if __name__ == '__main__':
    if len(sys.argv) != NB_ARG:
        exit(ERROR)
    pong()
